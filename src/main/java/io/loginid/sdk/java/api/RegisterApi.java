/*
 * LoginID Service API
 * # Introduction  <span class=\"subtext\"> Welcome to the LoginID API docs. This documentation will help understand the API calls being made behind our SDKs.  These APIs can be used to manage authentication, users, and user credentials. </span>  # Authentication  <span class=\"subtext\"> There is one main form of authentication for the API: <br/>&bull; API Service Token </span> 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.loginid.sdk.java.api;

import com.google.gson.reflect.TypeToken;
import io.loginid.sdk.java.invokers.*;
import io.loginid.sdk.java.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.*;

public class RegisterApi {
    private ApiClient apiClient;

    public RegisterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegisterApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for registerCompletePost
     * @param origin  (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerCompletePostCall(String origin, RegisterCompleteBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/register/complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (origin != null)
        localVarHeaderParams.put("Origin", apiClient.parameterToString(origin));
        if (requestID != null)
        localVarHeaderParams.put("Request-ID", apiClient.parameterToString(requestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerCompletePostValidateBeforeCall(String origin, RegisterCompleteBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling registerCompletePost(Async)");
        }

        com.squareup.okhttp.Call call = registerCompletePostCall(origin, body, requestID, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Finalize user registration process
     *
     * @param origin  (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthenticateCompleteResponse registerCompletePost(String origin, RegisterCompleteBody body, UUID requestID) throws ApiException {
        ApiResponse<AuthenticateCompleteResponse> resp = registerCompletePostWithHttpInfo(origin, body, requestID);
        return resp.getData();
    }

    /**
     * Finalize user registration process
     *
     * @param origin  (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthenticateCompleteResponse> registerCompletePostWithHttpInfo(String origin, RegisterCompleteBody body, UUID requestID) throws ApiException {
        com.squareup.okhttp.Call call = registerCompletePostValidateBeforeCall(origin, body, requestID, null, null);
        Type localVarReturnType = new TypeToken<AuthenticateCompleteResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finalize user registration process (asynchronously)
     *
     * @param origin  (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerCompletePostAsync(String origin, RegisterCompleteBody body, UUID requestID, final ApiCallback<AuthenticateCompleteResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerCompletePostValidateBeforeCall(origin, body, requestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthenticateCompleteResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerFido2CompletePost
     * @param body  (optional)
     * @param requestID  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerFido2CompletePostCall(RegisterFido2CompleteBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/register/fido2/complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requestID != null)
        localVarHeaderParams.put("Request-ID", apiClient.parameterToString(requestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerFido2CompletePostValidateBeforeCall(RegisterFido2CompleteBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = registerFido2CompletePostCall(body, requestID, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Finalize user registration (FIDO2)
     *
     * @param body  (optional)
     * @param requestID  (optional)
     * @return AuthenticationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthenticationResponse registerFido2CompletePost(RegisterFido2CompleteBody body, UUID requestID) throws ApiException {
        ApiResponse<AuthenticationResponse> resp = registerFido2CompletePostWithHttpInfo(body, requestID);
        return resp.getData();
    }

    /**
     * Finalize user registration (FIDO2)
     *
     * @param body  (optional)
     * @param requestID  (optional)
     * @return ApiResponse&lt;AuthenticationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthenticationResponse> registerFido2CompletePostWithHttpInfo(RegisterFido2CompleteBody body, UUID requestID) throws ApiException {
        com.squareup.okhttp.Call call = registerFido2CompletePostValidateBeforeCall(body, requestID, null, null);
        Type localVarReturnType = new TypeToken<AuthenticationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finalize user registration (FIDO2) (asynchronously)
     *
     * @param body  (optional)
     * @param requestID  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerFido2CompletePostAsync(RegisterFido2CompleteBody body, UUID requestID, final ApiCallback<AuthenticationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerFido2CompletePostValidateBeforeCall(body, requestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthenticationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerFido2InitPost
     * @param body  (optional)
     * @param requestID  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerFido2InitPostCall(RegisterFido2InitBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/register/fido2/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requestID != null)
        localVarHeaderParams.put("Request-ID", apiClient.parameterToString(requestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "serviceToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerFido2InitPostValidateBeforeCall(RegisterFido2InitBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = registerFido2InitPostCall(body, requestID, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Initiate user registration (FIDO2)
     * **Service token scope:** &#x60;auth.register&#x60;
     * @param body  (optional)
     * @param requestID  (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterFido2InitResponse registerFido2InitPost(RegisterFido2InitBody body, UUID requestID) throws ApiException {
        ApiResponse<RegisterFido2InitResponse> resp = registerFido2InitPostWithHttpInfo(body, requestID);
        return resp.getData();
    }

    /**
     * Initiate user registration (FIDO2)
     * **Service token scope:** &#x60;auth.register&#x60;
     * @param body  (optional)
     * @param requestID  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterFido2InitResponse> registerFido2InitPostWithHttpInfo(RegisterFido2InitBody body, UUID requestID) throws ApiException {
        com.squareup.okhttp.Call call = registerFido2InitPostValidateBeforeCall(body, requestID, null, null);
        Type localVarReturnType = new TypeToken<RegisterFido2InitResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Initiate user registration (FIDO2) (asynchronously)
     * **Service token scope:** &#x60;auth.register&#x60;
     * @param body  (optional)
     * @param requestID  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerFido2InitPostAsync(RegisterFido2InitBody body, UUID requestID, final ApiCallback<RegisterFido2InitResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerFido2InitPostValidateBeforeCall(body, requestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterFido2InitResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerInitPost
     * @param origin  (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerInitPostCall(String origin, RegisterInitBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/register/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (origin != null)
        localVarHeaderParams.put("Origin", apiClient.parameterToString(origin));
        if (requestID != null)
        localVarHeaderParams.put("Request-ID", apiClient.parameterToString(requestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerInitPostValidateBeforeCall(String origin, RegisterInitBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling registerInitPost(Async)");
        }

        com.squareup.okhttp.Call call = registerInitPostCall(origin, body, requestID, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Initiates user registration process
     *
     * @param origin  (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterInitResponse registerInitPost(String origin, RegisterInitBody body, UUID requestID) throws ApiException {
        ApiResponse<RegisterInitResponse> resp = registerInitPostWithHttpInfo(origin, body, requestID);
        return resp.getData();
    }

    /**
     * Initiates user registration process
     *
     * @param origin  (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterInitResponse> registerInitPostWithHttpInfo(String origin, RegisterInitBody body, UUID requestID) throws ApiException {
        com.squareup.okhttp.Call call = registerInitPostValidateBeforeCall(origin, body, requestID, null, null);
        Type localVarReturnType = new TypeToken<RegisterInitResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Initiates user registration process (asynchronously)
     *
     * @param origin  (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerInitPostAsync(String origin, RegisterInitBody body, UUID requestID, final ApiCallback<RegisterInitResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerInitPostValidateBeforeCall(origin, body, requestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterInitResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerPasswordPost
     * @param body  (optional)
     * @param requestID  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerPasswordPostCall(RegisterPasswordBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/register/password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requestID != null)
        localVarHeaderParams.put("Request-ID", apiClient.parameterToString(requestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "serviceToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerPasswordPostValidateBeforeCall(RegisterPasswordBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = registerPasswordPostCall(body, requestID, progressListener, progressRequestListener);
        return call;
    }

    /**
     * User registration (password)
     * **Service token scope:** &#x60;auth.register&#x60;
     * @param body  (optional)
     * @param requestID  (optional)
     * @return AuthenticationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthenticationResponse registerPasswordPost(RegisterPasswordBody body, UUID requestID) throws ApiException {
        ApiResponse<AuthenticationResponse> resp = registerPasswordPostWithHttpInfo(body, requestID);
        return resp.getData();
    }

    /**
     * User registration (password)
     * **Service token scope:** &#x60;auth.register&#x60;
     * @param body  (optional)
     * @param requestID  (optional)
     * @return ApiResponse&lt;AuthenticationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthenticationResponse> registerPasswordPostWithHttpInfo(RegisterPasswordBody body, UUID requestID) throws ApiException {
        com.squareup.okhttp.Call call = registerPasswordPostValidateBeforeCall(body, requestID, null, null);
        Type localVarReturnType = new TypeToken<AuthenticationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * User registration (password) (asynchronously)
     * **Service token scope:** &#x60;auth.register&#x60;
     * @param body  (optional)
     * @param requestID  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerPasswordPostAsync(RegisterPasswordBody body, UUID requestID, final ApiCallback<AuthenticationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerPasswordPostValidateBeforeCall(body, requestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthenticationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/*
 * LoginID Service API
 * # Introduction  <span class=\"subtext\"> Welcome to the LoginID API docs. This documentation will help understand the API calls being made behind our SDKs.  These APIs can be used to manage authentication, users, and user credentials. </span>  # Authentication  <span class=\"subtext\"> There is one main form of authentication for the API: <br/>&bull; API Service Token </span> 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.loginid.sdk.java.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * AuthenticateFido2CompleteAssertionPayload
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-10T08:30:05.952Z[GMT]")
public class AuthenticateFido2CompleteAssertionPayload {
  @SerializedName("challenge")
  private String challenge = null;

  @SerializedName("allowCredentials")
  private List<AuthenticateFido2CompleteAssertionPayloadAllowCredentials> allowCredentials = null;

  @SerializedName("rpId")
  private String rpId = null;

  public AuthenticateFido2CompleteAssertionPayload challenge(String challenge) {
    this.challenge = challenge;
    return this;
  }

   /**
   * Get challenge
   * @return challenge
  **/
  @Schema(example = "pO9V4DruYKrXClSwUn9pRIapBfFcl_l0khQd7YwqQRE", description = "")
  public String getChallenge() {
    return challenge;
  }

  public void setChallenge(String challenge) {
    this.challenge = challenge;
  }

  public AuthenticateFido2CompleteAssertionPayload allowCredentials(List<AuthenticateFido2CompleteAssertionPayloadAllowCredentials> allowCredentials) {
    this.allowCredentials = allowCredentials;
    return this;
  }

  public AuthenticateFido2CompleteAssertionPayload addAllowCredentialsItem(AuthenticateFido2CompleteAssertionPayloadAllowCredentials allowCredentialsItem) {
    if (this.allowCredentials == null) {
      this.allowCredentials = new ArrayList<AuthenticateFido2CompleteAssertionPayloadAllowCredentials>();
    }
    this.allowCredentials.add(allowCredentialsItem);
    return this;
  }

   /**
   * Get allowCredentials
   * @return allowCredentials
  **/
  @Schema(description = "")
  public List<AuthenticateFido2CompleteAssertionPayloadAllowCredentials> getAllowCredentials() {
    return allowCredentials;
  }

  public void setAllowCredentials(List<AuthenticateFido2CompleteAssertionPayloadAllowCredentials> allowCredentials) {
    this.allowCredentials = allowCredentials;
  }

  public AuthenticateFido2CompleteAssertionPayload rpId(String rpId) {
    this.rpId = rpId;
    return this;
  }

   /**
   * Get rpId
   * @return rpId
  **/
  @Schema(example = "localhost", description = "")
  public String getRpId() {
    return rpId;
  }

  public void setRpId(String rpId) {
    this.rpId = rpId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticateFido2CompleteAssertionPayload inlineResponse2003AssertionPayload = (AuthenticateFido2CompleteAssertionPayload) o;
    return Objects.equals(this.challenge, inlineResponse2003AssertionPayload.challenge) &&
        Objects.equals(this.allowCredentials, inlineResponse2003AssertionPayload.allowCredentials) &&
        Objects.equals(this.rpId, inlineResponse2003AssertionPayload.rpId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(challenge, allowCredentials, rpId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticateFido2CompleteAssertionPayload {\n");

    sb.append("    challenge: ").append(toIndentedString(challenge)).append("\n");
    sb.append("    allowCredentials: ").append(toIndentedString(allowCredentials)).append("\n");
    sb.append("    rpId: ").append(toIndentedString(rpId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
